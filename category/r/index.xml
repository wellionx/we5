<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Academic</title>
    <link>/category/r/</link>
      <atom:link href="/category/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Wei Li ©2021 </copyright><lastBuildDate>Fri, 18 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu8fa43e4483d02e4bfdf294b3386ef244_148313_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/category/r/</link>
    </image>
    
    <item>
      <title>Draw wheat chart in R</title>
      <link>/post/draw-wheat-chart-in-r/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/draw-wheat-chart-in-r/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/7%20wheat%20plots.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;前几天，在微信公众号里看到有个R包（gganatogram) 可以画动物和植物的图形，但是里面的小麦不好看。于是把我用R画的小麦分享出来，比一比哪个更好看😜。&lt;/p&gt;
&lt;p&gt;话不多说，先上图。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;先说说为什么要画这么一个图。&lt;/p&gt;
&lt;p&gt;那是在我刚进课题组的时候，就了解到实验室有大量小麦的数据。而且是从叶片到茎秆再到穗和籽粒等等各种器官一应俱全。更让人惊喜的是这些数据时间跨度大。当时我就在想，用什么样的方式才能展示出来这么丰富的空间和时间变化呢？&lt;/p&gt;
&lt;p&gt;一次偶然的机会，我联想到地图，地图里面的各个区域由多边形组成，区域的数值变化可以通过填色来完成。眼尖的同学应该看出来了，里面正是我华北平原的吴桥实验站（手动笑脸）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;而我们一株小麦上的各个器官正好对应着地图上不同区域。利用小麦不同器官的轮廓图，勾勒出多边形，再把多边形组合，就形成一株完整的小麦。&lt;/p&gt;
&lt;p&gt;有了这个想法之后，我就开始实施。首先从网上找到一株小麦的矢量图（就是各器官能分开的图形），然后根据各部分的轮廓创建多边形。是的，图形数据化用到了一款开源软件，名为&lt;a href=&#34;https://automeris.io/WebPlotDigitizer/&#34;&gt;WebPlotDigitizer&lt;/a&gt;。这款软件非常强大，可以提取图像或者图片中的坐标数据。这里特别提一句，小麦植株的比例做了一些微调，可能与真实的有点出入，但是不影响数据展示。还有一点，我们课题组专门研究地上部分的，暂时还没把根(器官)加进去，不过后期会考虑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img4.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;多边形创建采用了专门处理gis数据的R包sf。&lt;/p&gt;
&lt;p&gt;最后的成品就是前面看到的这个样子了。每一个部分都可以根据自己的需求填上任意的颜色。而且颜色也可以根据需求自己选择，颜色的深浅代表指标的高低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img5.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
也可以给每个部分添加标签，放上对应的数据。这样看起来好是不是好很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再来一张动图看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/mygif.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;好吧，最后公布一下那个R包里面的小麦。貌似也没那么难看 😄&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/wheatbygganotom.png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PCA analysis of reflectance spectra</title>
      <link>/post/2020-12-18-pca-analysis-of-reflectance-spectra/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-12-18-pca-analysis-of-reflectance-spectra/</guid>
      <description>


&lt;p&gt;对于光谱这种高维数据，常常需要通过降维发现其内部的规律。&lt;/p&gt;
&lt;p&gt;首先看下原始光谱。从中仅仅能看出不同波段的变异信息，很难挖掘到更多与样品类别相关的特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;于是采用PCA进行降维，观察不同样品的差异。从下面的图中，似乎可以看出样品有成簇分布的可能。但是PCA降维是无法将分类信息展示出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;于是通过层次聚类，发现类别相关的特征。有意思的结果出来了。似乎能根据光谱特征将样品分为不同类别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从直觉上看，4个类别似乎还是有可能的。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dend)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;采用kmeans进行聚类，发现确实4个类别是比较好的。而且还能生成非常漂亮的聚类PCA。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Gap statistic plot
fviz_gap_stat(res.km$gap_stat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fviz_cluster(res.km, geom = &amp;quot;point&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-6-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;至此，光谱降维外加聚类的完整分析流程就结束了。下面就是需要根据样品的生物学特征来做解释了。比如4个类别刚好是质地不同的类型，那么解释起来就更有说服力了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Website collection</title>
      <link>/post/2020-12-18-website-collection/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-12-18-website-collection/</guid>
      <description>


&lt;div id=&#34;r-包网站&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;R 包网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cowplot&lt;/code&gt;包，用于组合图形和图片&lt;/p&gt;
&lt;p&gt;链接在此：&lt;a href=&#34;https://wilkelab.org/cowplot/articles/introduction.html&#34; class=&#34;uri&#34;&gt;https://wilkelab.org/cowplot/articles/introduction.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggpubr&lt;/code&gt;包，号称可以生成发表级别的图。简单易用，但是灵活性不足。数据探索可以考虑使用&lt;/p&gt;
&lt;p&gt;链接在此：&lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr/index.html&#34; class=&#34;uri&#34;&gt;https://rpkgs.datanovia.com/ggpubr/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggstatsplot&lt;/code&gt;包, 画出来的图既漂亮还带有统计参数。棒棒棒！！！
&lt;a href=&#34;https://indrajeetpatil.github.io/ggstatsplot/&#34; class=&#34;uri&#34;&gt;https://indrajeetpatil.github.io/ggstatsplot/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sf&lt;/code&gt;包, 画地图的包，兼容性好。做不规则多边形也很好。当年我用轮廓构建的小麦植株就是用这个包做成的。
&lt;a href=&#34;https://r-spatial.github.io/sf/index.html&#34; class=&#34;uri&#34;&gt;https://r-spatial.github.io/sf/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggcor&lt;/code&gt;包，做相关性分析比较强大的包，简化了很多分析的门槛，输出相关性的矩阵也很方便。然而由于某些原因，作者删除了包。&lt;/p&gt;
&lt;p&gt;备份版本可以在gitee上找到：&lt;a href=&#34;https://gitee.com/wellionx/ggcor&#34; class=&#34;uri&#34;&gt;https://gitee.com/wellionx/ggcor&lt;/a&gt;
可以通过devtools安装使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;devtools::install_git(&amp;quot;https://gitee.com/wellionx/ggcor.git&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggvis&lt;/code&gt;包，可以画出很漂亮图形的R包
&lt;a href=&#34;http://ggvis.rstudio.com/&#34; class=&#34;uri&#34;&gt;http://ggvis.rstudio.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;endextend&lt;/code&gt;包，一个美化和拓展tree的包
&lt;a href=&#34;http://talgalili.github.io/dendextend/articles/dendextend.html&#34; class=&#34;uri&#34;&gt;http://talgalili.github.io/dendextend/articles/dendextend.html&lt;/a&gt;
做聚类分析，用于可视化的包，fviz_dend()函数在展示大型树的时候，加载过于漫长。于是搜索有没有更好的解决方法。终于找到了&lt;code&gt;dendextend&lt;/code&gt;这个包。而且竟然支持管道操作，真真对这个包一见钟情。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;echarts4r&lt;/code&gt;包，echarts 4的R版本，能画很多交互的图
&lt;a href=&#34;https://echarts4r.john-coene.com/articles/advanced.html&#34; class=&#34;uri&#34;&gt;https://echarts4r.john-coene.com/articles/advanced.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;&lt;code&gt;recharts&lt;/code&gt;包，echarts 2的R版本, 谢益辉开发。&lt;/del&gt;
&lt;del&gt;&lt;a href=&#34;http://madlogos.github.io/recharts/#-en&#34; class=&#34;uri&#34;&gt;http://madlogos.github.io/recharts/#-en&lt;/a&gt;&lt;/del&gt;
最近准备尝试用之前写过的recharts代码画一些图，才发现这个包可用了。原来谢大神早已弃坑，不再更新recharts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;echarter&lt;/code&gt;包，echarts 4的R版本, 最新开发。作者在开发版本的网页中也介绍了之前几个版本的echarts的R接口,都是挂在GitHub上的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cosname/recharts - ECharts4&lt;/li&gt;
&lt;li&gt;JohnCoene/echarts4r - ECharts4&lt;/li&gt;
&lt;li&gt;yihui/recharts - ECharts2&lt;/li&gt;
&lt;li&gt;madlogos/recharts - ECharts2 forked from yihui/recharts&lt;/li&gt;
&lt;li&gt;madlogos/recharts2 - ECharts3&lt;/li&gt;
&lt;li&gt;ChanningWong/REcharts3 - ECharts3&lt;/li&gt;
&lt;li&gt;XD-DENG/ECharts2Shiny - ECharts3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;数据科学&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;数据科学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;caret&lt;/code&gt;包的使用说明书，包含了很多数据科学的知识，值得深入研究&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://topepo.github.io/caret/&#34; class=&#34;uri&#34;&gt;https://topepo.github.io/caret/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于模型评估的内容：&lt;a href=&#34;https://topepo.github.io/caret/measuring-performance.html&#34;&gt;Measuring Performance&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例：
&lt;a href=&#34;https://www.yinxiang.com/&#34;&gt;印象笔记官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，还发现caret包能做&lt;a href=&#34;https://topepo.github.io/caret/recursive-feature-elimination.html&#34;&gt;Recursive Feature Elimination&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计学习即机器学习
&lt;a href=&#34;https://daviddalpiaz.github.io/r4sl/index.html&#34;&gt;R for Statistical Learning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R可视化的网站。介绍了几个主流的R绘图包，并配有例子
&lt;a href=&#34;https://ecodatasci-tlv.github.io/visualizations_in_r/&#34; class=&#34;uri&#34;&gt;https://ecodatasci-tlv.github.io/visualizations_in_r/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相关性分析可视化，一个比一个漂亮的图
&lt;a href=&#34;https://jamesmarquezportfolio.com/correlation_matrices_in_r.html&#34; class=&#34;uri&#34;&gt;https://jamesmarquezportfolio.com/correlation_matrices_in_r.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualize my spectra</title>
      <link>/post/visualize-my-spectra/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/visualize-my-spectra/</guid>
      <description>


&lt;p&gt;从去年开始就一直在分析光谱的数据，刚开始以为R里面会有包能解决我关于光谱的所有问题。经过一段时间的试错之后，我发现自己错了。&lt;/p&gt;
&lt;p&gt;于是记录下来我自己实践的过程。&lt;/p&gt;
&lt;div id=&#34;批量读取光谱数据&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;批量读取光谱数据&lt;/h3&gt;
&lt;p&gt;一般来说，拿到的原始光谱数据数据有这样的特点：&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;光谱反射率和光谱吸收值夹杂在文件内部。&lt;/strong&gt;以SR3501的数据为例，打开之后是这样的(如下图所示)。文件内部有很多关于仪器和配置的信息。真正对我们有价值的数据在27行以后。具体的就是此处的两列数据，第一列为波长，第二列为对应的反射率。所以这就要求读取数据的时候找到指定的行。
&lt;img src=&#34;https://tva3.sinaimg.cn/mw690/6b84e15bgy1ggsq5agy8xj20m80gmmyq.jpg&#34; alt=&#34;SR3501sedfile&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.&lt;strong&gt;数据文件不止一个，常常需要批量读取。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是经过多次试错与总结，写下了下面的方法批量读取指定行的光谱数据。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get file names of all spectra
dir = &amp;quot;Spec/&amp;quot;
files = list.files(path = dir ,recursive = TRUE)
# read spectra from AB files
filepath = paste(dir, files, sep = &amp;#39;&amp;#39;)
# define a dataframe to store spectra data
spec.bdf &amp;lt;- data.frame()

for (flp in filepath) {
  spec &amp;lt;- read.table(flp, skip = 27, header = F ,
                     stringsAsFactors = F,row.names = 1)
  spec.t &amp;lt;- as.data.frame(t(spec))
  spec.bdf &amp;lt;- rbind(spec.bdf, spec.t)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据需求，有时候要对数据做一下转置。转置后再把所有的数据bind到一起。&lt;/p&gt;
&lt;p&gt;采用&lt;code&gt;ggplot2&lt;/code&gt;绘图，需要的是长数据，原来两列的数据正好符合要求，只需要添加一列信息即可。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get file names of all spectra
dir = &amp;quot;Spec/&amp;quot;
files = list.files(path = dir ,recursive = TRUE)
# read spectra from AB files
filepath = paste(dir, files, sep = &amp;#39;&amp;#39;)
# define a dataframe to store spectra data
spec.bdf &amp;lt;- data.frame()

for (flp in filepath) {
  
  spec &amp;lt;- read.table(flp, skip = 27, header = F ,stringsAsFactors = F)
  colnames(spec) &amp;lt;- c(&amp;quot;Wavelengths&amp;quot;,&amp;quot;Reflectance&amp;quot;)
  spec$unique_id &amp;lt;- basename(flp)
  spec.df &amp;lt;- rbind(spec.df, spec)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了数据就可以展示了，下面是选出来100条光谱进行的展示。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(cowplot)
load(file = &amp;quot;D:/blogdown/sourceRda/show spectra.rda&amp;quot;)
# Define nice breaks for x axis
brk  &amp;lt;- pretty(as.numeric(unique(spec$Wavelengths)), n = 10)
spec.df$grp &amp;lt;- &amp;quot;A&amp;quot;

ggplot(spec.df, aes(Wavelengths, Reflectance,group = unique_id)) +
  geom_line(aes(color = grp),alpha = 0.7, size = 0.6) +
  scale_x_continuous(breaks = brk) +
  theme_cowplot() +
  scale_color_manual(values = &amp;quot;black&amp;quot;) +
  theme(legend.position = &amp;quot;none&amp;quot;) # remove the legend&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-visualize-my-spectra/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了好看，我们还可以给每条光谱加上颜色&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-visualize-my-spectra/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;后续更多有意思的分析且听下回分解&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;后续更多有意思的分析，且听下回分解&lt;/h3&gt;
&lt;p&gt;先附上几张图，再留着以后慢慢讲&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/spectra%20organ%20separate.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/Spectra%20and%20PCA.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/spectra%20PCA.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
